#include<bits/stdc++.h>
using namespace std;

class Solution {
public:
    vector<int>bfsOfGraph(int V, vector<int> adj[]){
        vector<int> bfs;
        vector<int> vis(V+1, 0);
        queue<int> q;
        q.push(1);
        vis[1] = 1;
        while(!q.empty()) {
            int node = q.front();
            q.pop();
            bfs.push_back(node);
	        
            for(auto it : adj[node]) {
                if(!vis[it]) {
                    q.push(it);
                    vis[it] = 1;
                }
            }
        }
	    
        return bfs;
    }
};


int main(){
    ios::sync_with_stdio(false);
    cin.tie(nullptr);
    int tc;
    cin >> tc;
    // for multiple graphs
    while(tc--){
        int V, E;
        cin >> V >> E;

        vector<int> adj[V+1];

        for(int i = 0; i < E; i++)
        {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u); // comment this for directed graoh
        }

        Solution obj;
        vector<int>ans=obj.bfsOfGraph(V, adj);
        for(int i=0;i<ans.size();i++){
            cout<<ans[i]<<" ";
        }
        cout<<endl;
    }
    return 0;
}
//1
//5 7
//1 2
//1 5
//1 3
//3 5
//2 3
//2 4
//3 4

//For 0 based indexing
//Replace V+1 with V and q.push(0) and mark 0 as visited
//1
//5 7
//0 1
//0 4
//0 2
//2 4
//1 2
//1 3
//2 3
//0 1 4 2 3
