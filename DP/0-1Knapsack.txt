//1. Recursive
#include <bits/stdc++.h>
using namespace std;
int knapSack(int W, int wt[], int val[], int n)
{
    if(n==0||W==0) return 0;
    if(W>=wt[n-1]) return max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n-1));
    return knapSack(W,wt,val,n-1);
}
int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << knapSack(W, wt, val, n);
}
//2. Memoization

#include <bits/stdc++.h>
using namespace std;

int knapSackRec(int W, int wt[],int val[], int i,int** dp){
    if (i < 0)return 0;
    if (dp[i][W] != -1)return dp[i][W];

    if (wt[i] > W) {dp[i][W] = knapSackRec(W, wt,
                               val, i - 1,
                               dp);
        return dp[i][W];
    }
    else {
        dp[i][W] = max(val[i]+ knapSackRec(W - wt[i],wt, val,i - 1, dp),knapSackRec(W, wt, val,i - 1, dp));
        return dp[i][W];
    }
                }
int knapSack(int W, int wt[], int val[], int n)
                {
    int** dp;
    dp = new int*[n];
  for (int i = 0; i < n; i++)
        dp[i] = new int[W + 1];

    for (int i = 0; i < n; i++) //You can use n+1 here, its not needed and IF YOU WANT TO USE IT YOU MUST CHANGE ABOVE N to N+1 as well
        for (int j = 0; j < W + 1; j++)
            dp[i][j] = -1;
        return knapSackRec(W, wt, val, n - 1, dp);
                }
int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << knapSack(W, wt, val, n);
    return 0;
   }
   
//3. Top Down DP

#include <bits/stdc++.h>
using namespace std;
int knapSack(int W, int wt[], int val[], int n)
{
    int i, w;
    vector<vector<int>> K(n + 1, vector<int>(W + 1));
    for(i = 0; i <= n; i++)
    {
        for(w = 0; w <= W; w++)
        {
            if (i == 0 || w == 0)
                K[i][w] = 0;
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] +K[i - 1][w - wt[i - 1]],
                        K[i - 1][w]);
            else K[i][w] = K[i - 1][w];
        }
    }
    return K[n][W];
}
int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    cout << knapSack(W, wt, val, n);
}