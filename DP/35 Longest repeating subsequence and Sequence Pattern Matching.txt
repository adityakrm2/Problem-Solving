#include <bits/stdc++.h>
using namespace std;
int dp[10][10]; //for this example dp[4][4] and mem[4][4] also works as mem[4][4]=mem[n1+1][n2+1]



void printSubsDP(string x,string y,int n1,int n2){
    for (int i = 0; i <=n1; ++i) {
        for (int j = 0; j <=n2; ++j) {
            if(i==0||j==0) dp[i][j]=0;
            else if(x[i-1]==y[j-1]&&i!=j) dp[i][j]=1+dp[i-1][j-1];
            else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }
    cout<<dp[n1][n2]<<" ";
    //OPTIONAL - printing it
    string s;
    while(n1&&n2){
        if(x[n1-1]==y[n2-1]&&n1!=n2) s.push_back(x[n1-1]),--n1,--n2; //ideally we should store them in a separate string and then reverse it for right order
        else{
            if(dp[n1-1][n2]>dp[n1][n2-1]) --n1;
            else --n2;
        }
    }
    reverse(s.begin(),s.end());
    cout<<s;
};

int main(){
    string x="AABEBCDD";
    string y=x;
    int n1=x.size(),n2=y.size();

    printSubsDP(x,y,n1,n2);


}

//
//Sequence Pattern Matching
//

#include <bits/stdc++.h>
using namespace std;
int dp[10][10]; //for this example dp[4][4] and mem[4][4] also works as mem[4][4]=mem[n1+1][n2+1]



int subsDP(string x,string y,int n1,int n2){
    for (int i = 0; i <=n1; ++i) {
        for (int j = 0; j <=n2; ++j) {
            if(i==0||j==0) dp[i][j]=0;
            else if(x[i-1]==y[j-1]) dp[i][j]=1+dp[i-1][j-1];
            else dp[i][j]=max(dp[i-1][j],dp[i][j-1]);
        }
    }
    return dp[n1][n2];
};

int main(){
    string x="axy";
    string y="abxdye";
    int n1=x.size(),n2=y.size();

    int ans=subsDP(x,y,n1,n2);
    ans==min(n1,n2)?cout<<"yes":cout<<"no";
}