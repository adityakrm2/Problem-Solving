GFG accepted solution

#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution{

public:
    int coin_change_2(int coin[],int n,int sum){

        int t[n+1][sum+1];
        memset(t,-1,sizeof(t));

        for (int i = 0; i < n+1; i++)
        {
            for (int j = 0; j < sum+1; j++)
            {
                if(i==0){
                    t[i][j] = INT_MAX-1;
                }
                else if(j == 0 && i!=0){
                    t[i][j] = 0;
                }
            }
        }


        for (int i = 1; i < n+1; i++)
        {
            for (int j = 1; j < sum+1; j++)
            {
                if(coin[i-1]<=j){
                    t[i][j] = min(t[i][j-coin[i-1]] + 1 , t[i-1][j]);
                }
                else{
                    t[i][j] = t[i-1][j];
                }
            }
        }

        return t[n][sum] == INT_MAX-1 ? -1 : t[n][sum];
    }

    int minCoins(int coins[], int M, int V)
    {
        coin_change_2(coins,M,V);
    }

};

// { Driver Code Starts.
int main()
{


    int t;
    cin >> t;
    while (t--)
    {
        int v, m;
        cin >> v >> m;

        int coins[m];
        for(int i = 0; i < m; i++)
            cin >> coins[i];


        Solution ob;
        cout << ob.minCoins(coins, m, v) << "\n";

    }
    return 0;
}

1
30 3
25 10 5
