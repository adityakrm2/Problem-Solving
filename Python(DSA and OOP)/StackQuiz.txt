# lex_auth_012742584360976384939

class Stack:
    def __init__(self, max_size):
        self.__max_size = max_size
        self.__elements = [None] * self.__max_size
        self.__top = -1

    def get_max_size(self):
        return self.__max_size

    def is_full(self):
        if (self.__top == self.__max_size - 1):
            return True
        return False

    def is_empty(self):
        if (self.__top == -1):
            return True
        return False

    def push(self, data):
        if (self.is_full()):
            print("The stack is full!!")
        else:
            self.__top += 1
            self.__elements[self.__top] = data

    def pop(self):
        if (self.is_empty()):
            print("The stack is empty!!")
        else:
            data = self.__elements[self.__top]
            self.__top -= 1
            return data

    def display(self):
        if (self.is_empty()):
            print("The stack is empty")
        else:
            index = self.__top
            while (index >= 0):
                print(self.__elements[index])
                index -= 1

    # You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        msg = []
        index = self.__top
        while (index >= 0):
            msg.append((str)(self.__elements[index]))
            index -= 1
        msg = " ".join(msg)
        msg = "Stack data(Top to Bottom): " + msg
        return msg


def find_average(num_list):
    # write your logic here

    return num_list


# Push different values to the stack and test your program
num_list = Stack(4)
num_list.push(10)
num_list.push(5)
num_list.push(2)
num_list.push(4)





# lex_auth_012742477906173952821
class Node:
    def __init__(self, data):
        self.__data = data
        self.__next = None

    def get_data(self):
        return self.__data

    def set_data(self, data):
        self.__data = data

    def get_next(self):
        return self.__next

    def set_next(self, next_node):
        self.__next = next_node


class LinkedList:
    def __init__(self):
        self.__head = None
        self.__tail = None

    def get_head(self):
        return self.__head

    def get_tail(self):
        return self.__tail

    def add(self, data):
        new_node = Node(data)
        if (self.__head is None):
            self.__head = self.__tail = new_node
        else:
            self.__tail.set_next(new_node)
            self.__tail = new_node

    def insert(self, data, data_before):
        new_node = Node(data)
        if (data_before == None):
            new_node.set_next(self.__head)
            self.__head = new_node
            if (new_node.get_next() == None):
                self.__tail = new_node

        else:
            node_before = self.find_node(data_before)
            if (node_before is not None):
                new_node.set_next(node_before.get_next())
                node_before.set_next(new_node)
                if (new_node.get_next() is None):
                    self.__tail = new_node
            else:
                print(data_before, "is not present in the Linked list")

    def display(self):
        temp = self.__head
        while (temp is not None):
            print(temp.get_data())
            temp = temp.get_next()

    def find_node(self, data):
        temp = self.__head
        while (temp is not None):
            if (temp.get_data() == data):
                return temp
            temp = temp.get_next()
        return None

    def delete(self, data):
        node = self.find_node(data)
        if (node is not None):
            if (node == self.__head):
                if (self.__head == self.__tail):
                    self.__tail = None
                self.__head = node.get_next()
            else:
                temp = self.__head
                while (temp is not None):
                    if (temp.get_next() == node):
                        temp.set_next(node.get_next())
                        if (node == self.__tail):
                            self.__tail = temp
                        node.set_next(None)
                        break
                    temp = temp.get_next()
        else:
            print(data, "is not present in Linked list")

    # You can use the below __str__() to print the elements of the DS object while debugging
    def __str__(self):
        temp = self.__head
        msg = []
        while (temp is not None):
            msg.append(str(temp.get_data()))
            temp = temp.get_next()
        msg = " ".join(msg)
        msg = "Linkedlist data(Head to Tail): " + msg
        return msg



number_list = LinkedList()
number_list.add(1)
number_list.add(2)

number_list.add(5)
number_list.add(3)




def generate (input_linked_list , input_stack):
    temp= input_linked_list.get_head ( )
    element=0
    while(temp.get_next ( ) is not None):
        temp.set_data (temp.get_data ( )+temp.get_next ( ). get_data ( )+element)
        if temp.get_data ( ) %2 !=0:
            temp.set_data(temp.get_data ( ) +input_stack.pop ( ) )
            element=temp.get_data ( )
        else:
            input_stack.push (element )
            element=temp.get_next ( ).get_data ( )
        temp=temp.get_next ( )
    temp.set_data(temp.get_data ( )+input_stack.pop ( ) )
generate(number_list,num_list)

number_list.display()
print("Vibhor is my son")
num_list.display()