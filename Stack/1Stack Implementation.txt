#include <bits/stdc++.h>
using namespace std;

// A structure to represent a stack
class StackNode {
public:
    int data;
    StackNode* next;
};
StackNode* newNode(int data){
    auto* stackNode= new StackNode(); //or Stacknode* stacknode
    stackNode->data=data;
    (*stackNode).next= nullptr;
    return stackNode;
}
int isEmpty(StackNode* root)
{
    return !root; //or you can maybe do root->data==nullptr or something
}
void push(StackNode** root,int data){
    StackNode*stackNode= newNode(data);
    stackNode->next=*root;
    *root=stackNode;
    cout<<data<<"pushed \n";
}
int pop(StackNode** root)
{
    if (isEmpty(*root))
        return INT_MIN;
    StackNode* temp=*root;
    *root=(*root)->next; //this step itself is good enough for output, but deleting allocated memory and printing result is also important
    int popped= temp->data;
    free(temp);
    return popped;
}
int peek(StackNode* root)
{
    if (isEmpty(root))
        return INT_MIN;
    return root->data;
}

int main()
{
    StackNode* root = NULL;

    push(&root, 10);
    push(&root, 20);
    push(&root, 30);

    cout << pop(&root) << " popped from stack\n";

    cout << "Top element is " << peek(root) << endl;

    cout<<"Elements present in stack : ";
    //print all elements in stack :
    while(!isEmpty(root))
    {
        // print top element in stack
        cout<<peek(root)<<" ";
        // remove top element in stack
        pop(&root);
    }

    return 0;
}

//2


/* C++ program to implement basic stack
operations */
#include <bits/stdc++.h>

using namespace std;

#define MAX 1000

class Stack {
	int top;

public:
	int a[MAX]; // Maximum size of Stack

	Stack() { top = -1; }
	bool push(int x);
	int pop();
	int peek();
	bool isEmpty();
};

bool Stack::push(int x)
{
	if (top >= (MAX - 1)) {
		cout << "Stack Overflow";
		return false;
	}
	else {
		a[++top] = x;
		cout << x << " pushed into stack\n";
		return true;
	}
}

int Stack::pop()
{
	if (top < 0) {
		cout << "Stack Underflow";
		return 0;
	}
	else {
		int x = a[top--];
		return x;
	}
}
int Stack::peek()
{
	if (top < 0) {
		cout << "Stack is Empty";
		return 0;
	}
	else {
		int x = a[top];
		return x;
	}
}

bool Stack::isEmpty()
{
	return (top < 0);
}

// Driver program to test above functions
int main()
{
	class Stack s;
	s.push(10);
	s.push(20);
	s.push(30);
	cout << s.pop() << " Popped from stack\n";
	//print all elements in stack :
	cout<<"Elements present in stack : ";
	while(!s.isEmpty())
	{
		// print top element in stack
		cout<<s.peek()<<" ";
		// remove top element in stack
		s.pop();
	}

	return 0;
}
//3

#include <bits/stdc++.h>
using namespace std;

int main(){
    stack<int> s1;
    s1.push(1);
    s1.push(2);
    s1.push(4);
    s1.pop();
    while(!s1.empty()) { cout << s1.top() << " "; s1.pop();}
}