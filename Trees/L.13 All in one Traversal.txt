#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {} //if you just create a TreeNode object val will be 0 and both pointers will be nullptr
    explicit TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}  //if you only specify a value then it would assume it is a leaf node and left and right pointers will be nullptr
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} //alongside val if you want to attach subtree something probably like:- struct TreeNode*root= new TreeNode(1,new TreeNode(2),new TreeNode(3));
};
class Solution {

public:
    vector<int> postorderTraversal(TreeNode* root) {
        stack<pair<TreeNode*,int>> st;
        st.push({root, 1});
        vector<int> pre,in,post;
        if(root== nullptr) return post; //or pre or in whatever is required

        while(!st.empty()) {
            auto it =st.top();
            st.pop();
            if(it.second==1){
                pre.push_back(it.first->val);
                it.second++;
                st.push(it);
                if(it.first->left!= nullptr) st.push({it.first->left,1});
            }
            else if(it.second==2){
                in.push_back(it.first->val);
                it.second++;
                st.push(it);
                if(it.first->right!= nullptr) st.push({it.first->right,1});
            }
            else post.push_back(it.first->val);
        }
        return post;
    }

};
int main()
{

    struct TreeNode*root= new TreeNode(1,new TreeNode(2),new TreeNode(3));
    root->left->right= new TreeNode(4);
    root->left->right->right= new TreeNode(4);
    Solution s1;
    for(auto it:s1.postorderTraversal(root)) cout<<it<<" ";
}


