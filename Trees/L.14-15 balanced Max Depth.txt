//1. A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

class Solution {
public:
    int max1=0;
    int maxDepth(TreeNode* root) {
        if(root== nullptr) return 0;
        max1=max(maxDepth(root->left),maxDepth(root->right));
        max1++;
        return max1;
    }
};

//2.Balanced- if(abs(l-r)<=1)


#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {} //if you just create a TreeNode object val will be 0 and both pointers will be nullptr
    explicit TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}  //if you only specify a value then it would assume it is a leaf node and left and right pointers will be nullptr
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} //alongside val if you want to attach subtree something probably like:- struct TreeNode*root= new TreeNode(1,new TreeNode(2),new TreeNode(3));
};
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        return dfsHeight (root) != -1;
    }
    int dfsHeight (TreeNode *root) {
        if (root == NULL) return 0;
        
        int leftHeight = dfsHeight (root -> left);
        if (leftHeight == -1) return -1; //if we ever get -1, this make sure we can get -1 everywhere in stack call
        int rightHeight = dfsHeight (root -> right);
        if (rightHeight == -1) return -1;//if we ever get -1, this make sure we can get -1 everywhere in stack call
        
        if (abs(leftHeight - rightHeight) > 1)  return -1;
        return max (leftHeight, rightHeight) + 1;
    }
};
int main()
{

    struct TreeNode*root= new TreeNode(1,new TreeNode(2),new TreeNode(3));
    root->left->right= new TreeNode(4);
    root->left->right->right= new TreeNode(4);
    Solution s1;
    cout<<s1.isBalanced(root);
    //for(auto it:s1.maxDepth(root)) cout<<it<<" ";
}


//3. Diameter
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        height(root, diameter);
        return diameter;
    }
private:
    int height(TreeNode* node, int& diameter) {
        if (!node) return 0;

        int lh = height(node->left, diameter);
        int rh = height(node->right, diameter);
        diameter = max(diameter, lh + rh);
        return 1 + max(lh, rh);
    }
};

Extra: Pass by address instead of pass by reference
class Solution {
public:
    int diameterOfBinaryTree(TreeNode* root) {
        int diameter = 0;
        height(root, &diameter);
        return diameter;
    }
private:
    int height(TreeNode* node, int* diameter) {
        if (!node) return 0;

        int lh = height(node->left, diameter);
        int rh = height(node->right, diameter);//we dont need any modification to diameter in lh or rh calls
        *diameter = max(*diameter, lh + rh);
        return 1 + max(lh, rh);
    }
};