
#include <bits/stdc++.h>
using namespace std;

struct TreeNode {
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode() : val(0), left(nullptr), right(nullptr) {} //if you just create a TreeNode object val will be 0 and both pointers will be nullptr
    explicit TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}  //if you only specify a value then it would assume it is a leaf node and left and right pointers will be nullptr
    TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {} //alongside val if you want to attach subtree something probably like:- struct TreeNode*root= new TreeNode(1,new TreeNode(2),new TreeNode(3));
};

class Solution {
    public:
        vector<vector<int>> levelOrder(TreeNode* root) {
            vector<vector<int>>ans;
            if(root == nullptr) return ans;
            queue<TreeNode*> q; //One node with whatever left and right pointer will count as 1 on q.size()
            q.push(root);
            while(!q.empty()){
                int n=q.size();
                vector<int> level;
                for (int i = 0; i < n; ++i) {
                    if(q.front()->left!= nullptr) q.push(q.front()->left);
                    if(q.front()->right!= nullptr) q.push(q.front()->right);
                    level.push_back(q.front()->val);
                    q.pop();
                }
                ans.push_back(level);
            }
        return ans;
        }
    };
class Solution2 { //EXTRA: JUST MINOR CHANGES
public:
    vector<vector<int>> levelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        if(root == nullptr) return ans;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()) {
            int size = q.size();
            vector<int> level;
            for(int i = 0;i<size;i++) {
                TreeNode *node = q.front();
                q.pop();
                if(node->left != nullptr) q.push(node->left);
                if(node->right != nullptr) q.push(node->right);
                level.push_back(node->val);
            }
            ans.push_back(level);
        }
        return ans;
    }
};

int main()
{

    struct TreeNode*root= new TreeNode(1,new TreeNode(2, new TreeNode(4), new TreeNode(5)),new TreeNode(3,new TreeNode(6),new TreeNode(7)));
   // preorderTraversal(root);
    Solution s1;
    s1.levelOrder(root);
    for(auto it:s1.levelOrder(root)) {
        cout << " || ";
        for (auto it1:it)
            cout << it1 << " ";
    }


}